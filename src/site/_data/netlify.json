{"items":[{"title":"First Steps Using Netlify & Angular","description":"<p>Well, hello there! Welcome to the start of your journey with Netlify and Angular. We&rsquo;re so happy to have you! At Netlify we want to empower you to make awesome web projects with ease; from local development to global deployment. In this post I&rsquo;ll walk you through the first steps of connecting and deploying your Angular application with our web UI (user interface aka website) and the Netlify CLI (command line interface) tools. If you have any questions or comments check out <a href=\"https://community.netlify.com\">our community</a> for answers from our team and fellow Netlify users. Let&rsquo;s get started!</p> <h2 id=\"using-netlify-s-web-ui\">Using Netlify&rsquo;s Web UI</h2> <p>When you first go to <a href=\"https://www.netlify.com\">netlify.com</a> you can connect your account to a git repository by signing into <a href=\"http://github.com/\">GitHub</a>, <a href=\"https://gitlab.com\">GitLab</a>, or <a href=\"https://bitbucket.org\">Bitbucket</a>. Netlify does the work to link your account to your repositories. First, go to your Sites page (<a href=\"https://app.netlify.com/teams/\">https://app.netlify.com/teams/</a><your team name>/sites) and click the &lsquo;New site from Git&rsquo; button. This will open up your Git account of choice and list all the projects from that account. Next, you just need to select the project, choose the branch and fill out the build command and publish directory.</p> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/H8t_olktbAI\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe> <p>For Angular, the build command is, most likely <code>ng build --prod</code>. You can definitely set the <a href=\"https://angular.io/guide/build#configuring-application-environments\">environment flag</a> to whichever is best suited for your particular project. If you&rsquo;re curious, you can also check out more information about the Angular CLI&rsquo;s <code>ng build</code> command <a href=\"https://angular.io/cli/build\">here in their docs</a>. The publish directory is asking for the folder that your project lives in. When using the <code>ng build</code> command with the Angular CLI the project is saved in the <code>dist</code> (short for distributable) folder under the project name. If you customized where you wanted your project build output, you&rsquo;ll want to list that location instead.</p> <blockquote>\n<p>Just to recap, the setup with most commonly be:</p> <p><strong>Build command</strong>: ng build &ndash;prod</p> <p><strong>Publish directory</strong>: dist/{project name} (e.g. dist/anglify)</p>\n</blockquote> <p>That is all the information needed to deploy your Angular project onto Netlify using the web UI. Once that&rsquo;s setup and a deploy is started you can track the progress and see the logs on your project&rsquo;s overview (<a href=\"https://app.netlify.com/sites/{project\">https://app.netlify.com/sites/{project</a> name}/overview) or deploys (<a href=\"https://app.netlify.com/sites/{project\">https://app.netlify.com/sites/{project</a> name}/deploys) page. You can also find the link for your site on those two pages.</p> <p><img src=\"/img/blog/screen-shot-2019-09-19-at-12.26.21-pm.png\" alt=\"the site overview screen\" title=\"overview page\" /></p> <h3 id=\"deploying-three-ways\">Deploying, Three Ways üòôüëå</h3> <p>One of the easiest ways to deploy your site once you have it hooked up to your project&rsquo;s git repo is to push a commit. When connecting through your repo Netlify automatically sets you up with a CI/CD (continuous integration/continuous deployment) pipeline. Check out more information about Netlify&rsquo;s continuous integration <a href=\"https://www.netlify.com/docs/continuous-deployment/\">in our docs</a>. You can also just trigger a deploy by going to your project&rsquo;s deploy page and clicking the &lsquo;Trigger deploy&rsquo; button. This button gives you the option to simply trigger a deploy or clear your cache then deploy your site. Finally, if you don&rsquo;t want to push code <em>or</em> push buttons you can just drag and drop your project folder (e.g. <code>dist/{project-name}</code>) onto this section of your deploys page:</p> <p><img src=\"https://res.cloudinary.com/dzkoxrsdj/image/upload/v1568817659/dragndrop_tv0ocu.jpg\" alt=\"drag and drop section on the deploys page\" /></p> <p>There are your web UI options for deployment. Now, let us mosey on over to my favorite place, Terminal Town üë©üèª‚Äçüíª!</p> <h2 id=\"using-netlify-s-cli\">Using Netlify&rsquo;s CLI</h2> <p>As an Angular user, I felt very spoiled with all the work the Angular CLI does (generating components (<code>ng generate</code>), integrating packages (<code>ng add</code>), updating itself (<code>ng update</code>), etc.). I was very happy to know that I could stay on the command line using <a href=\"https://www.netlify.com/docs/cli/\">Netlify&rsquo;s CLI</a>.</p> <blockquote>\n<p>By the way, the Netlify CLI is an open source project ‚ú®. <a href=\"https://github.com/netlify/cli\">Come join the fun!</a></p>\n</blockquote> <p>The CLI can be installed using your package manager of choice and, if you like, you can install it globally using the <code>-g</code> flag. To connect to your account you just run <code>netlify login</code>.</p> <p><em>code to run on the command line</em></p> <pre><code class=\"language-bash\">npm install netlify-cli -g &amp;&amp; netlify login\n</code></pre> <p>Once you&rsquo;re logged in you can go to your project&rsquo;s directory and run <code>netlify init</code> to get it set up on Netlify. You will have the option to either connect it to one of your existing Netlify sites or create and configure a new site. If the project has a git remote repo assigned to <code>origin</code> the CLI will find it and ask if you want to use it to link up your site. There are other options though. You can find the site by searching, listing your recently updated sites, or by using your site ID. That&rsquo;s all there is to linking the project to your Netlify account. So, with the Netlify&rsquo;s default continuous deployment, if you push to that repo it will automatically deploy your site! Easy like Sunday morning (which, hopefully, are very easy for you).</p> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TU8InQba0lI\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe> <p>If you&rsquo;re really excited and want to get your site deployed before you&rsquo;ve even created a git repo, you can! Just like before, you just need to run <code>netlify init</code> but this time when it sees no Git repo it will call it out. The CLI ask you to either chose the option to deploy the site manually or go create one. After choosing to manually deploy, it will ask you for some information about the project then add it to your account. From this point you can now just run <code>netlify deploy</code> per usual.</p> <p>By default, <code>netlify deploy</code> will deploy your project to a <em>draft</em> url. This information along with the link and build information is all listed in the output after you run the <code>deploy</code> command. We wanted to make sure you explicitly want the deploy to be production. So when your site is for sure, for sure ready you&rsquo;ll want to add the <code>--prod</code> flag. After you run <code>netlify deploy --prod</code> it will ask for the Publish directory.</p> <blockquote>\n<p>You can set your build settings in a <code>netlify.toml</code> configuration file so it stops nagging you üòõabout the Publish directory on each deploy. Check out the <a href=\"https://www.netlify.com/docs/netlify-toml-reference/\">docs</a> to learn more.</p>\n</blockquote> <p>Once the deploy is started, it will output the Admin URL (for status, logs, and more), the live URL, and the Site ID.</p> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fcnSP2CPuSw\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe> <h2 id=\"so-deployable\">So Deployable</h2> <p>Now you have the first steps to showing the world your amazing Angular creations:</p> <ul>\n<li>linking to your Git repos</li>\n<li>which, in turn, adds continuous deployment</li>\n<li>deploying from commit pushes, triggered deploys or drag n drop deploys</li>\n<li>installing the netlify cli</li>\n<li>linking and deploying projects from said netlify cli</li>\n</ul> <p>There is <em>so much</em> more you can do with both the web UI and the Netlify CLI. Now that you have your projects set up and you did an amazing job deploying them (you smart cookie), I highly recommend checking out <a href=\"https://www.netlify.com/docs/\">our docs</a>.</p> <p>Here are some other resources that will help you on your path to being even more skilled than you already are üòç:</p> <ul>\n<li>A <a href=\"https://www.netlify.com/blog/2019/09/17/using-the-angular-builder-for-netlify/\">blog post</a> about using the Angular builder for Netlify by ME!</li>\n<li>Check out these <a href=\"https://www.netlify.com/docs/#helpful-hints\">helpful hints</a> to help you in your Netlijourney.</li>\n<li>To have a blast with the CLI, I recommend checking out both <a href=\"https://www.netlify.com/docs/cli/\">our docs</a> and our <a href=\"https://github.com/netlify/cli\">repo</a>.</li>\n</ul> <p>Happy coding, everyone!</p>","link":"https://www.netlify.com/blog/2019/09/23/first-steps-using-netlify-angular/","url":"https://www.netlify.com/blog/2019/09/23/first-steps-using-netlify-angular/","guid":"https://www.netlify.com/blog/2019/09/23/first-steps-using-netlify-angular/","pubDate":"Mon, 23 Sep 2019 00:00:00 +0000","created":1569196800000},{"title":"Using the Angular Builder for Netlify","description":"<p>I was stoked to try out the <a href=\"https://github.com/ngx-builders/netlify-builder\"><code>netlify-builder</code></a> built for the Angular CLI by <a href=\"https://www.santoshyadav.dev\">Santosh Yadav</a>. It&rsquo;s <em>super</em> easy to use. One thing I was hesitant üò¨ about was putting my personal access token in the public <code>angular.json</code> file. Instead I made a script to deploy any project by passing in my token as an environment variable. Come code with me ü§ó.</p> <h2 id=\"first-step-add-the-builder\">First step: add the builder üõ†</h2> <p>To use the the builder we first want to add it to our Angular project with the handy <code>ng add</code> command. The <a href=\"https://angular.io/cli/add\"><code>ng add</code></a> command from the Angular CLI will configure your project to use a published npm package library based on that library&rsquo;s schematic.</p> <p><em>code to run in the command line:</em></p> <p><code>ng add @netlify-builder/deploy</code></p> <p>Running this command will walk us through setting up the builder. It first asks for the project API ID or Site ID of your Netlify project. We can find this by going to the project page clicking &lsquo;Settings&rsquo; in the top menu, then &lsquo;Site Settings&rsquo; under the &lsquo;General&rsquo; menu tab (<a href=\"https://app.netlify.com/sites/\">https://app.netlify.com/sites/</a><your site name>/settings/general#site-information)</p> <p><img src=\"/img/blog/app-id.png\" alt=\"guide to find the site id in the settings page\" title=\"site id\" /></p> <p>The next step in the builder setup asks for our Personal Access Token but we don&rsquo;t want to put that in a public file. If we do add it in this setup the builder adds that information to the <code>angular.json</code> file.</p> <p><img src=\"/img/blog/deploy-angular-json.png\" alt=\"an example of the angular.json deploy setting\" title=\"deploy settings\" /></p> <p>We want to avoid ‚ò†Ô∏èhaving that sensitive information in a public file that anyone can see. Luckily, the way Santosh set up the builder we don&rsquo;t have to add the Token here, <a href=\"https://github.com/ngx-builders/netlify-builder/blob/master/command-builder/deploy/index.ts#L33\">instead it will check for an environment variable</a>. So, we just hit enter to skip that part.</p> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tILx6ylyP_4?rel=0&amp;controls=0&amp;showinfo=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe> <h2 id=\"second-final-step-setting-the-token-variable\">Second || Final Step: setting the Token üóù variable</h2> <p>We want to set the token by using a <code>process.env</code> global variable. To find your Netlify Token just head to <a href=\"https://app.netlify.com/user/applications/personal\">your application&rsquo;s token generating page</a> or click on your avatar, the &lsquo;User Settings&rsquo; option, click &lsquo;Applications&rsquo; in the left menu, then click the &lsquo;New access token&rsquo; button under &lsquo;Personal access tokens&rsquo;. We can type anything that is a good reference for you as the description of your token and click the &lsquo;Generate&rsquo; button.</p> <p><img src=\"/img/blog/token.png\" alt=\"finding your token through the Netlify UI\" title=\"netlify access token\" /></p> <blockquote>\n<p>NOTE: Make sure you copy the newly created token once it&rsquo;s generated. You can&rsquo;t view it again after you leave that page. You can always create a new one though üòéüëç.</p>\n</blockquote> <p>Normally, we would just need to write the command <code>ng run &lt;project name&gt;:deploy</code>. With this environment variable we now write:</p> <p><em>code to run in the command line:</em></p> <p><code>NETLIFY_TOKEN=&lt;token&gt; ng run &lt;project name&gt;:deploy</code></p> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yHETIuM391E?rel=0&amp;controls=0&amp;showinfo=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe> <h2 id=\"way-cooler-last-step\">üåà Way Cooler Last Step üßú‚Äç</h2> <p>Why type all that when we can make a shell command where we pass in the project name (aka the name of the folder in the app&rsquo;s dist directory) for whichever app we&rsquo;re working on üíÅüèª‚Äç. In our <code>.bashrc</code> file we make a function of any name, in this case we&rsquo;ll call it <code>netliLove</code>. In this function we can set the <code>NETLIFY_TOKEN</code> environment variable to the access token we copied earlier. We can use this token for every product so we will hardcode it here. The project name, on the other hand, will change. To make that part dynamic we&rsquo;ll use a parameter. With bash scripts you can add a dollar sign (<code>$</code>) and a digit to represent a <a href=\"https://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html\">positional parameter</a> and pass an argument when you run the function. Using <code>$1</code> will make it so when we call <code>netlilove &lt;project name&gt;</code> it will run the deploy command and populate the project variable with our project name.</p> <p><em>code to add to <code>~/.bashrc</code>:</em></p> <pre><code class=\"language-bash\">netliLove() { NETLIFY_TOKEN=&lt;token&gt; ng run &quot;$1&quot;:deploy\n}\n</code></pre> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sL7XYI74XWc?rel=0&amp;controls=0&amp;showinfo=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe> <p>Here&rsquo;s what we&rsquo;ve accomplished in this post:</p> <ul>\n<li>added <a href=\"https://www.npmjs.com/package/@netlify-builder/deploy\"><code>netlify-builder</code></a> to our Angular application</li>\n<li>used it to deploy our application with an environment variable instead of adding our token to a public file</li>\n<li>made a totally rad bash script that stores our token to be used with any project and saves us keystrokes</li>\n</ul> <p>You should be proud of yourself. I&rsquo;m proud of you. Go you!</p> <h2 id=\"no-more-steps\">No üôÖüèª‚Äç More Steps</h2> <p>That&rsquo;s it! Whichever way you decide to use the builder, I hope you had a fun time setting it up. At least, I hope you found it to be a painless process. I really appreciate Santosh putting the work into creating this builder AND making it <a href=\"https://github.com/ngx-builders/netlify-builder\">open source</a>. If you&rsquo;d like to contribute or check out the code you can find it <a href=\"https://github.com/ngrx-builders/netlify-builder\">here on GitHub</a> and you can learn more about Santosh <a href=\"https://www.santoshyadav.dev/\">on his website</a>.</p> <p>Not ready for the coding fun to end? Check out these other resources:</p> <ul>\n<li>Dive into our <a href=\"https://www.netlify.com/docs/\">docs</a>!</li>\n<li>Add <a href=\"https://www.netlify.com/blog/2019/09/10/announcing-the-faunadb-add-on-for-netlify/\">Fauna DB</a> to your project.</li>\n</ul> <p>Happy coding, everyone!</p>","link":"https://www.netlify.com/blog/2019/09/17/using-the-angular-builder-for-netlify/","url":"https://www.netlify.com/blog/2019/09/17/using-the-angular-builder-for-netlify/","guid":"https://www.netlify.com/blog/2019/09/17/using-the-angular-builder-for-netlify/","pubDate":"Tue, 17 Sep 2019 00:00:00 +0000","created":1568678400000},{"title":"Netlify pro tip: Using Split Testing to power private beta releases","description":"<p>Sometimes it can be useful to give your users early access to a new feature of part of your site or application. We often think of this kind of access as a ‚Äúprivate beta‚Äù. We do this regularly at Netlify when preparing to launch a new feature and when we want to get it into the hands of some enthusiastic beta testers or early adopters.</p> <p>Typically this entails advertising the details of the new feature to a set of users, and giving them the ability to opt in to the beta via a suitably informative page.</p> <p>Here‚Äôs one which is similar, but not quite identical, to the opt-in for an upcoming Netlify release:</p> <p><img src=\"/img/blog/blog-split-test-betas-beta.jpg\" alt=\"example beta opt-in UI\" /></p> <h2 id=\"netli-ception\">Netli-ception</h2> <p>This is yet another example of Netlify using Netlify to build Netlify! We dogfood our product very eagerly. Often this leads us to discover crafty little hacks and uses for our own tools. This tip came about exactly that way.</p> <p>Making your own opt-in beta testing UI, and then serving new features just to those invited users is far more straight-forward than you might expect, thanks to the way that the Netlify Split Testing feature works.</p> <p>In this post, I‚Äôll explain how to create your own opt-in for a private beta. You could use this with any type of site you like, regardless of what tools or static site generator you used to create it. The example in the video below was a site created with Hugo, but it could be anything. I also use it regularly with sites made with Gatsby or Eleventy.</p> <p>If you‚Äôd prefer to watch a video rather than read the details, you can watch the short explanation and demonstration in the video below. Or for a little more info, and some code snippets, read on.</p> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Q5-QTaAOSrY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> <h2 id=\"creating-your-beta\">Creating your beta</h2> <p>Before you can give users the chance to opt-in to trying your new beta functionality, you need to build and deploy it. (In my little example above, I chose to test out a version of a site which had a new colour theme ‚Äì just for the sake of an obvious illustration.)</p> <p>But how to deploy multiple versions of your site?\nThis is where Git branches come to the rescue!</p> <p>Netlify can build all of your branches and serve them on dedicated URLs. <a href=\"https://www.netlify.com/docs/continuous-deployment/#branches-deploys\">Creating a feature branch</a> for your new beta and having Netlify‚Äôs continuous deployment pipeline build and host it for you gives you an addressable version of your site with its new features.</p> <p><a href=\"https://www.netlify.com/docs/split-testing/\">Netlify‚Äôs Split Testing feature</a> uses your deployed branches to power different variants of your sites as part of multi-variant tests. If you‚Äôve not explored this before, it‚Äôs worth checking out <a href=\"https://dev.to/philhawksworth/power-up-gatsby-sites-with-a-b-testing-on-netlify-fp4\">my previous article and video about A/B testing on Netlify.</a> (tl;dr: You can invisibly shape your site traffic across any of your branch builds right at the CDN, with no loss of performance).</p> <p><img src=\"/img/blog/blog-split-test-betas-config.jpg\" alt=\"Configuring a split test on Netlify\" /></p> <h2 id=\"giving-the-user-control-to-opt-in-and-out\">Giving the user control to opt in and out</h2> <p>Hosting the beta feature is taken care of by a branch build. And the split testing feature can provide users with access to different branch builds invisibly (that is, all from the same production URL).</p> <p>By creating a split test which divides traffic between your production branch (usually master) and your beta branch (which I called ‚Äúoh-so-orange‚Äù in my example), but then configuring the traffic shaping to direct 100% of the traffic to the production branch, you‚Äôll take the element of chance out of determining which version your users see. Everyone will see your production version, unless they explicitly opt-in to be served from the beta branch.</p> <p>And we have a mechanism to allow them to do that.</p> <p>Netlify split testing allocates visitors to the different available branches by setting a cookie in their browser. This cookie, called <code>nf_ab</code>, is set by the <a href=\"https://www.netlify.com/products/edge/\">Netlify CDN</a> when a user visits a site with an active split test. It contains a random floating point number between 0 and 1.</p> <p>Here‚Äôs the cookie added by the Netlify CDN when I visit my own site:</p> <p><img src=\"/img/blog/blog-split-test-betas-inspect.jpg\" alt=\"\" /></p> <p>That numeric value was randomly generated and will persist in the user‚Äôs browser until it expires, or until the spit test is terminated. The value of the cookie will determine which branch services the user‚Äôs request. It corresponds to the weighting of each branch participating in the split test.</p> <p>For example, if we had a test running across 3 branches with these weightings:</p> <ol>\n<li>master: 50%</li>\n<li>test-branch-1: 20%</li>\n<li>test-branch-2: 30%</li>\n</ol> <p>‚Ä¶then the users with a cookie value between 0.0 and 0.50 would be served by master. Those with values between 0.50 and 0.70 would be served by test-branch-1. And those with a value of 0.70 to 1.0 would be served by test-branch-2.</p> <p>Using a cookie in this way ensures that all users have affinity with the branch they were randomly allocated. That avoids getting a mixed experience across different branches in subsequent visits.</p> <p>But cleverly, the cookie doesn‚Äôt only support a numeric value. It can also hold a string. This lets us set it with the name of a branch.</p> <p>This crafty technical design decision means that setting the value of a cookie via a user interaction in the browser, will have the effect of nominating a specific branch to use. Even if that branch is set to receive 0% of the traffic in a split test.</p> <h2 id=\"providing-a-ui\">Providing a UI</h2> <p>It‚Äôs important to know what you are getting yourself into when you opt in to a private beta, so it is good form to provide a page which describes what the beta will include. This can live on a page within your site with a convenient URL for you to share with those whom you‚Äôd like to invite to participate.</p> <p>My own site, which I used as the example in the video above, has evolved a little since the time of recording, but that invite URL lives on. These days, it looks like this:</p> <p><img src=\"/img/blog/blog-split-test-betas-gimme.jpg\" alt=\"Try out a new feature via this invitation\" /></p> <p>You can <a href=\"https://www.hawksworx.com/gimme-gimme\">go to this opt-in page</a> and give it a try.</p> <p>The button which users can click to opt in uses JavaScript to do 2 things:</p> <ol>\n<li>It sets the <code>nf_ab</code> cookie to hold the name of the branch serving the private beta (‚Äúoh-so-orange‚Äù in this example)</li>\n<li>It reloads the page, causing Netlify‚Äôs intelligent CDN (which, more accurately, we call our Application Delivery Network or ADN) to now service requests according to the branch specified by the cookie.</li>\n</ol> <p>This requires only a few lines of client-side JavaScript which looks something like this:</p> <pre><code class=\"language-js\">\n// a little helper for handling click events\nfunction buttonHandler(selector, callback) { var btn = document.querySelector(selector); if(!btn) { return; } btn.addEventListener('click', function(event) { event.preventDefault(); callback(); }, false);\n} // Set a cookie to opt in to the beta\nbuttonHandler('#btn-opt-in', function(){ // set the cookie with the name of the branch of our private beta document.cookie = &quot;nf_ab=oh-so-orange; expires=Thu, 01 Jan 2021 00:00:00 GMT&quot;; // reload the page to pick up the new option // (forcing the browser to re-request it, rather than serving from browser cache) window.location.reload(true); }); </code></pre> <p>Where this link exists in the HTML for the user to interact with:</p> <pre><code class=\"language-html\">&lt;a href=&quot;#&quot; id=&quot;btn-opt-in&quot;&gt; Opt me in to the private beta please!\n&lt;/a&gt;\n</code></pre> <h2 id=\"let-me-out\">Let me out!</h2> <p>I also like to make it easy for the user to opt out again. A good convention is to use the exact same URL in the beta branch to serve a link which resets the user back to the default production branch. In this way, people can return to one page in your site to toggle their participation in and out of the beta.</p> <p>You can try it here: <a href=\"https://hawksworx.com/gimme-gimme\">https://hawksworx.com/gimme-gimme</a></p> <p>Opting out is as simple as clearing the cookie which is specifying the beta branch. Another few lines of JavaScript can do that for us:</p> <pre><code class=\"language-js\">// Clear the cookie to opt out of the beta\nbtnHandler('#btn-opt-out', function(){ // clear and expire the cookie. document.cookie = &quot;nf_ab=;expires=Thu, 01 Jan 1970 00:00:01 GMT;&quot;; // reload the page to pick up the new option window.location.reload(true); });\n</code></pre> <h2 id=\"from-obscurity-to-security\">From obscurity to security</h2> <p>When we enable branch builds, Netlify will serve them on a URL containing the branch name. This is the URL convention:</p> <pre><code>https://{BRANCH-NAME}--{SITE-NAME}.netlify.com\n</code></pre> <p>If you are using a custom domain, you can also configure things to use a subdomain for each branch.</p> <p>This is great, and very helpful for using branches as testing, staging, or feature branches. But if are using the branch builds for our private betas, we might not want somebody to circumvent the invitation or opt-in process by directly visiting the URL for the beta branch. (Assuming that they could guess or somehow discover the name of this branch).</p> <p>We can add a safeguard to prevent anybody from accessing the beta branch directly by visiting its URL. For this we‚Äôll use Netlify‚Äôs Redirects API which also operates directly on the Netlify ADN.</p> <p>A couple of redirect rules can ensure that any visits to the beta branch will be redirected elsewhere. The only way to access the content of that branch will be if it is served via our split test and opt in. Here‚Äôs what the redirects would look like. They live in the <a href=\"https://github.com/philhawksworth/hawksworx.com/blob/oh-so-orange/netlify.toml#L75-L85\">beta branch</a> in Netlify‚Äôs configuration file: <code>netlify.toml</code> :</p> <pre><code class=\"language-toml\">[[redirects]] from = &quot;https://a-branch-deploy--example.netlify.com&quot; to = &quot;https://example.com:&quot; status = 301 force = true [[redirects]] from = &quot;https://a-branch-deploy--example.netlify.com/*&quot; to = &quot;https://example.com/:splat&quot; status = 301 force = true\n</code></pre> <p>With rules like these in place, there‚Äôs no more direct access to my ‚Äúoh-so-orange‚Äù private beta branch.</p> <p>Try it üëâ <a href=\"https://oh-so-orange--hawksworx.netlify.com/\">https://oh-so-orange&ndash;hawksworx.netlify.com/</a></p> <h2 id=\"server-side-but-without-the-server\">Server-side, but without the server</h2> <p>This approach to providing opt-in beta access is another example of the advantages you begin to enjoy when you build atop of a git model, and pre-generate your sites. Very much a core tenet of the JAMstack approach to building modern web sites.</p> <p>By generating each variant of our site at build time, and serving each one as a collection of static assets directly form a CDN, each one enjoys the same performance profile as the production site. No client-side logic is involved to render different variants. Our only client-side logic is in our code which allows the user to nominate to access a particular branch from that point forward. Everything else is performed automatically for us on the CDN.</p> <p>No server to maintain. No infrastructure to manage.</p> <p>If you find more creative ways to make use of branch deploys, or split tests on Netlify, I‚Äôd love to hear about them.</p> <p>Please do share them, or your questions about this technique in the <a href=\"https://community.netlify.com\">Netlify community forum</a>.</p> <h2 id=\"resources\">Resources</h2> <p>Where to go from here?</p> <ul>\n<li><a href=\"https://dev.to/philhawksworth/power-up-gatsby-sites-with-a-b-testing-on-netlify-fp4\">Power up Gatsby sites with A/B testing on Netlify</a></li>\n<li><a href=\"https://www.netlify.com/docs/split-testing/\">Netlify Split testing documentation</a></li>\n<li><a href=\"https://www.netlify.com/docs/redirects/?utm_source=blog&amp;utm_medium=devto&amp;utm_campaign=devex\">Netlify Redirects documentation</a></li>\n<li><a href=\"https://netlify.com/drop\">Deploy your first site with Netlify Drop</a></li>\n<li><a href=\"https://jamstack.org/\">Official JAMstack site</a></li>\n<li><a href=\"https://jamstack.org/slack\">JAMstack community Slack</a></li>\n</ul>","link":"https://www.netlify.com/blog/2019/09/11/netlify-pro-tip-using-split-testing-to-power-private-beta-releases/","url":"https://www.netlify.com/blog/2019/09/11/netlify-pro-tip-using-split-testing-to-power-private-beta-releases/","guid":"https://www.netlify.com/blog/2019/09/11/netlify-pro-tip-using-split-testing-to-power-private-beta-releases/","pubDate":"Wed, 11 Sep 2019 00:00:00 +0000","created":1568160000000},{"title":"Announcing the FaunaDB Add-on for Netlify","description":"<p><img src=\"/img/blog/netlify-fauna.png\" alt=\"\" /></p> <p>We‚Äôre excited to announce the FaunaDB Add-on for Netlify, which empowers users to create a fully-featured, globally-distributed data backend for their applications within seconds.</p> <p><a href=\"https://docs.fauna.com/fauna/current/start/netlify\">Get started with the FaunaDB Add-on for Netlify-&gt;</a></p> <p>This integration allows users to instantly add FaunaDB to any JAMstack project running on Netlify, and to manage the database instance via FaunaDB Console.</p> <h2 id=\"what-is-faunadb\">What is FaunaDB?</h2> <p>FaunaDB is a serverless cloud database with a native GraphQL API. FaunaDB is a globally distributed system, that offers ubiquitous low-latency access to both reads and writes, without sacrificing data correctness. Consequently, you can avoid layers of app code for manually handling data anomalies, security and scale while embracing the ‚Äúpush once, deploy globally‚Äù paradigm that Netlify has pioneered.</p> <h2 id=\"add-on-capabilities\">Add-on Capabilities</h2> <p>The FaunaDB Add-on for Netlify enables users to seamlessly plug in a globally distributed datastore into their applications with an instant GraphQL backend for Netlify apps, without any provisioning. They can also associate databases with their FaunaDB account so that they can manage them within FaunaDB Console.</p> <p>Once users have a Netlify account, creating a database within your site can be done in using a few simple commands:</p> <pre><code>npm i netlify-cli -g\nmkdir my_project\ncd my_project\nnetlify init\n</code></pre> <p>This installs the <a href=\"https://www.netlify.com/docs/cli/\">Netlify CLI tools</a>, and create and initialize a Netlify project.</p> <pre><code>netlify addons:create fauna\n</code></pre> <p>This command creates a FaunaDB instance for your new site.</p> <pre><code>netlify addons:auth fauna\n</code></pre> <p>This prompts you to sign up with FaunaDB, or login if you already have an account. Once logged in, you are prompted to name your database and import it into your account. This allows you to interact with your database directly using the FaunaDB Console.</p> <p>The complete documentation for this add-on can be found <a href=\"https://docs.fauna.com/fauna/current/start/netlify\">here</a>.</p> <h2 id=\"a-new-login-option\">A New Login Option</h2> <p>Users can now also <a href=\"https://dashboard.fauna.com\">create an account and login to FaunaDB</a> with their Netlify account credentials using OAuth:</p> <p><img src=\"/img/blog/screenshot-2019-09-10-06.04.14.png\" alt=\"\" /></p> <h2 id=\"benefits-for-users-of-netlify-and-faunadb\">Benefits for users of Netlify and FaunaDB</h2> <p>The FaunaDB Add-on for Netlify extends the productivity of the serverless experience to application data, which is in strong demand within the JAMstack community. Serverless data eliminates all database operations, which is a welcome abstraction for those who don&rsquo;t wish to spend both time and money managing servers.</p> <p>FaunaDB is the only <a href=\"https://www.netlify.com/blog/2018/07/09/building-serverless-crud-apps-with-netlify-functions-faunadb/\">serverless cloud database</a> with a direct Add-on for Netlify, making it the perfect choice for developers who want to build stateful apps on Netlify. Databases created via the Add-on are available for use instantly with FaunaDB‚Äôs native GraphQL API.</p> <p>Globally distributed data ensures that data is close to where your users are, thus enabling a snappy user experience for apps deployed on Netlify‚Äôs global fabric. Database instances created with this Add-on can be managed via FaunaDB Console as well as FaunaDB Shell for hassle-free use.</p> <h2 id=\"conclusion\">Conclusion</h2> <p>With this Add-on, anyone using FaunaDB and Netlify can come up with an idea and launch it immediately, just by focusing on the frontend. Netlify users can use FaunaDB as a stateful component of their apps with ease, and get started using a generous free tier.</p> <p>Please visit the <a href=\"https://docs.fauna.com/fauna/current/start/netlify\">FaunaDB documentation</a> to learn more. And please <a href=\"https://twitter.com/fauna\">let us know</a> what you think so that we can incorporate your feedback into a future release.</p> <p>What other integrations would you like to see implemented in FaunaDB? Please reach out to me on <a href=\"https://linkedin.com/in/lewisking\">LinkedIn</a> and the FaunaDB <a href=\"https://community-invite.fauna.com\">Community Slack</a> and describe any other features that would make FaunaDB and Netlify an obvious choice for your next project.</p>","link":"https://www.netlify.com/blog/2019/09/10/announcing-the-faunadb-add-on-for-netlify/","url":"https://www.netlify.com/blog/2019/09/10/announcing-the-faunadb-add-on-for-netlify/","guid":"https://www.netlify.com/blog/2019/09/10/announcing-the-faunadb-add-on-for-netlify/","pubDate":"Tue, 10 Sep 2019 00:00:00 +0000","created":1568073600000}],"title":"Blog on Netlify: All-in-one platform for automating modern web projects","description":"Recent content in Blog on Netlify: All-in-one platform for automating modern web projects","url":"https://www.netlify.com/blog/","image":""}